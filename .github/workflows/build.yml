name: Build Project (QNAP compatible)

on:
  push:
    branches: [ main ]
    tags:
      - "v*.*.*"   # create a GitHub Release when you push a semver tag
  pull_request:
    branches: [ main ]

permissions:
  contents: write  # needed for release upload in the release job

concurrency:
  group: build-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always

jobs:
  # --- 1) Build & Test on native runners (debugging & CI sanity) ---
  test-native:
    name: Test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Show toolchain
        run: rustc -Vv && cargo -V

      - name: Clippy (warnings as errors)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Build (host)
        run: cargo build --release --verbose

      - name: Test
        run: cargo test --verbose

      - name: Upload native Linux binary
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: xlsx-trimmer-linux-host
          path: target/release/xlsx-trimmer

      - name: Upload Windows exe
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: xlsx-trimmer-windows
          path: target/release/xlsx-trimmer.exe

  # --- 2A) QNAP-compatible GLIBC (dynamic) build in manylinux2014 (GLIBC 2.17) ---
  build-qnap-glibc:
    name: Build QNAP (x86_64 GNU/glibc â‰¤ 2.21 compatible)
    runs-on: ubuntu-latest
    needs: [test-native]
    # Build inside manylinux2014 to ensure we link against an old-enough GLIBC (2.17),
    # which will run on QNAP boxes with ldd (GNU libc) 2.21.
    container:
      image: quay.io/pypa/manylinux2014_x86_64:latest
      options: --cpus 2
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain in container
        run: |
          set -eux
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          echo 'source $HOME/.cargo/env' >> $GITHUB_ENV
      - name: Show toolchain
        shell: bash
        run: |
          source $HOME/.cargo/env
          rustc -Vv && cargo -V
          ldd --version | head -n1

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Build (glibc dynlink, x86_64-unknown-linux-gnu)
        shell: bash
        run: |
          set -eux
          source $HOME/.cargo/env
          # Default target in this container is x86_64-unknown-linux-gnu (glibc)
          cargo build --release --target x86_64-unknown-linux-gnu --verbose
          ls -lah target/x86_64-unknown-linux-gnu/release/

      - name: Verify GLIBC symbol versions used
        shell: bash
        run: |
          set -eux
          BIN=target/x86_64-unknown-linux-gnu/release/xlsx-trimmer
          # List referenced GLIBC symbol versions; should be <= GLIBC_2.17
          objdump -T "$BIN" | awk '/GLIBC_[0-9]/ {print $NF}' | sort -Vu || true

      - name: Strip binary (shrink size)
        run: |
          strip target/x86_64-unknown-linux-gnu/release/xlsx-trimmer || true

      - name: Package artifacts (tar/zip + checksums)
        shell: bash
        run: |
          set -eux
          OUTDIR=dist
          BIN=target/x86_64-unknown-linux-gnu/release/xlsx-trimmer
          mkdir -p "$OUTDIR"
          cp "$BIN" "$OUTDIR/xlsx-trimmer"
          chmod +x "$OUTDIR/xlsx-trimmer"

          # Tar.gz (Linux deploy)
          tar -C "$OUTDIR" -czf "$OUTDIR/xlsx-trimmer-linux-x86_64-glibc.tar.gz" xlsx-trimmer

          # Zip variant (optional)
          (cd "$OUTDIR" && zip -q xlsx-trimmer-linux-x86_64-glibc.zip xlsx-trimmer)

          # Checksums
          (cd "$OUTDIR" && sha256sum xlsx-trimmer xlsx-trimmer-*.tar.gz xlsx-trimmer-*.zip > SHA256SUMS.txt)

          ls -lah "$OUTDIR"

      - name: Upload GLIBC artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xlsx-trimmer-linux-x86_64-glibc-compat
          path: |
            dist/xlsx-trimmer
            dist/xlsx-trimmer-linux-x86_64-glibc.tar.gz
            dist/xlsx-trimmer-linux-x86_64-glibc.zip
            dist/SHA256SUMS.txt

  # --- 2B) Optional: also produce a MUSL static binary as a portable fallback ---
  build-qnap-musl:
    name: Build QNAP (x86_64 MUSL static)
    runs-on: ubuntu-latest
    needs: [test-native]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2

      - name: Toolchain (musl target)
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-unknown-linux-musl

      - name: Build static (musl)
        env:
          RUSTFLAGS: "-C target-feature=+crt-static"
        run: |
          set -eux
          cargo build --release --target x86_64-unknown-linux-musl --verbose
          ls -lah target/x86_64-unknown-linux-musl/release/

      - name: Strip binary (shrink size)
        run: |
          sudo apt-get update
          sudo apt-get install -y binutils
          strip target/x86_64-unknown-linux-musl/release/xlsx-trimmer || true

      - name: Package artifacts (tar/zip + checksums)
        run: |
          set -eux
          OUTDIR=dist
          BIN=target/x86_64-unknown-linux-musl/release/xlsx-trimmer
          mkdir -p "$OUTDIR"
          cp "$BIN" "$OUTDIR/xlsx-trimmer"
          chmod +x "$OUTDIR/xlsx-trimmer"

          # Tar.gz (Linux deploy)
          tar -C "$OUTDIR" -czf "$OUTDIR/xlsx-trimmer-linux-x86_64-musl.tar.gz" xlsx-trimmer

          # Zip variant (optional)
          (cd "$OUTDIR" && zip -q xlsx-trimmer-linux-x86_64-musl.zip xlsx-trimmer)

          # Checksums
          (cd "$OUTDIR" && sha256sum xlsx-trimmer xlsx-trimmer-*.tar.gz xlsx-trimmer-*.zip > SHA256SUMS.txt)

          ls -lah "$OUTDIR"

      - name: Upload MUSL artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xlsx-trimmer-linux-x86_64-musl
          path: |
            dist/xlsx-trimmer
            dist/xlsx-trimmer-linux-x86_64-musl.tar.gz
            dist/xlsx-trimmer-linux-x86_64-musl.zip
            dist/SHA256SUMS.txt

  # --- 3) Build GNU/glibc binary on a manylinux image (max compatibility with older glibc like QNAP 2.21) ---
  build-qnap-glibc:
    name: Build QNAP (x86_64 GNU/glibc)
    runs-on: ubuntu-latest
    needs: [test-native]
    # run inside a manylinux2014 container which uses an older glibc baseline (glibc 2.17)
    container:
      image: quay.io/pypa/manylinux2014_x86_64
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Rust (in-container)
        uses: Swatinem/rust-cache@v2

      - name: Install build deps
        run: |
          set -eux
          # manylinux images are minimal; install cmake and core build tools if missing
          yum -y install make gcc gcc-c++ tar gzip || true

      - name: Install Rust toolchain
        run: |
          set -eux
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup default stable
          rustup component add clippy rustfmt || true
          rustc -Vv && cargo -V

      - name: Build (glibc-linked release)
        env:
          CARGO_TERM_COLOR: always
        run: |
          set -eux
          source $HOME/.cargo/env
          # default target in container is x86_64-unknown-linux-gnu
          cargo build --release --verbose
          ls -lah target/release/

      - name: Strip binary (shrink size)
        run: |
          set -eux
          source $HOME/.cargo/env
          # strip may be available as strip
          strip target/release/xlsx-trimmer || true

      - name: Package artifacts (tar/zip + checksums)
        run: |
          set -eux
          OUTDIR=dist-glibc
          BIN=target/release/xlsx-trimmer
          mkdir -p "$OUTDIR"
          cp "$BIN" "$OUTDIR/xlsx-trimmer"
          chmod +x "$OUTDIR/xlsx-trimmer"

          # Tar.gz (Linux deploy)
          tar -C "$OUTDIR" -czf "$OUTDIR/xlsx-trimmer-linux-x86_64-gnu.tar.gz" xlsx-trimmer

          # Zip variant (optional)
          (cd "$OUTDIR" && zip -q xlsx-trimmer-linux-x86_64-gnu.zip xlsx-trimmer) || true

          # Checksums
          (cd "$OUTDIR" && sha256sum xlsx-trimmer xlsx-trimmer-*.tar.gz xlsx-trimmer-*.zip > SHA256SUMS.txt) || true

          ls -lah "$OUTDIR"

      - name: Upload GNU/glibc artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xlsx-trimmer-linux-x86_64-gnu
          path: |
            dist-glibc/xlsx-trimmer
            dist-glibc/xlsx-trimmer-linux-x86_64-gnu.tar.gz
            dist-glibc/xlsx-trimmer-linux-x86_64-gnu.zip
            dist-glibc/SHA256SUMS.txt

  # --- 3) Optional: create a GitHub Release on tag push and attach artifacts ---
  release:
    name: Publish GitHub Release
    runs-on: ubuntu-latest
    needs: [build-qnap-glibc, build-qnap-musl]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release_artifacts

      - name: List downloaded
        run: find release_artifacts -type f -maxdepth 3 -print

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          generate_release_notes: true
          files: |
            release_artifacts/**/xlsx-trimmer
            release_artifacts/**/xlsx-trimmer-*.tar.gz
            release_artifacts/**/xlsx-trimmer-*.zip
            release_artifacts/**/SHA256SUMS.txt
